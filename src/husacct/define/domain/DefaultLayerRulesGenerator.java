package husacct.define.domain;

import husacct.define.domain.module.Module;
import husacct.define.task.AppliedRuleController;


import java.util.ArrayList;
import java.util.HashMap;


public class DefaultLayerRulesGenerator{
	

	


ArrayList<Module> layers = new  ArrayList<Module>();

private AppliedRuleController rulesController;


public DefaultLayerRulesGenerator(AppliedRuleController controller)
{
	this.rulesController=controller;
}


public void applydefualtrules(Module root)
{



for(Module m :root.getSubModules())
{
	
if(m.getType().toLowerCase().equals("layer"))
{

 fillLayers(m);

}

}

	

	



}



public void applychanges() {
	for(Module ui: layers)
	{
	
		putRules(ui);
		
	}
	
}



private void fillLayers(Module m) {

	layers.add(m);
	
	applydefualtrules(m);
	
}







private void putRules(Module m) {
	int pos= layers.indexOf(m);
	int parentPos = m.getparent().getSubModules().indexOf(m);
	
	for (int i = pos+1; i < layers.size(); i++) {
	  if(layers.get(i).getparent()==m.getparent()&&layers.get(i).getparent().getSubModules().indexOf(layers.get(i))-parentPos==1)
	  {
		 
		  rulesController.saveDefualtrules(createRule(layers.get(i), m));
		  
	  }else{	
		  rulesController.saveDefualtrules(createRule(layers.get(i), m));
		  	
		
		  if(i-(pos+1)>0)
		{
			  rulesController.saveDefualtrules(createRule(m,layers.get(i)));
			
		}
		if(layers.get(i).getparent()!=m.getparent()
				&&layers.get(i).getparent().getSubModules().indexOf(layers.get(i))<parentPos)
		{
		
			rulesController.saveDefualtrules(createRule(m,layers.get(i)));
			
		}
		
		
		
	  }
	}
	
	
	 
	
	
	
	
	
}














public HashMap<String, Object> createRule(Module moduleFrom,Module moduleTo)
{
	HashMap<String, Object> ruleDetails = new HashMap<String,Object>();
	ruleDetails.put("ruleTypeKey", "IsNotAllowedToUse");
	ruleDetails.put("moduleFromId", moduleFrom);
	ruleDetails.put("moduleToId", moduleTo);
	ruleDetails.put("enabled", true);
	ruleDetails.put("description", "This rule has been AutoGenerated");
	ruleDetails.put("regex", "");
	ruleDetails.put("dependencies", createDependancies());
	return ruleDetails;
}



public  String[] createDependancies()
{
	

 String[] dependencies={ "InvocMethod","Exception","AccessPropertyOrField","ExtendsInterface","Import","ExtendsConcrete","Annotation", "Declaration","InvocConstructor","ExtendsLibrary","ExtendsAbstract"," Implements "};
return dependencies;	
}




	
}







