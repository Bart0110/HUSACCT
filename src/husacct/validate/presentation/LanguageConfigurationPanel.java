/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package husacct.validate.presentation;

import husacct.validate.domain.validation.ViolationType;
import husacct.validate.domain.validation.ruletype.RuleType;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Jorik
 */
public class LanguageConfigurationPanel extends javax.swing.JPanel {

	String[] violationtypeModelHeaders = {"Ruletype", "Severity"};
	DefaultTableModel violationtypeModel = new DefaultTableModel(violationtypeModelHeaders, 0);
	private final ComboBoxTableModel ruletypeModel;

    /** Creates new form LanguageConfigurationPanel */
    public LanguageConfigurationPanel() {
       String[] ruletypeColumnNames = {"Ruletype", "Severity"};
	   String[] severities = {"High", "Low"};
		ruletypeModel = new ComboBoxTableModel(ruletypeColumnNames, 0, severities) {

			Class<?>[] types = new Class[]{
			java.lang.String.class, java.lang.String.class
			};
			boolean[] canEdit = new boolean[]{
				true, true
			};

			@Override
			public Class<?> getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			@Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		};
		initComponents();

		// Assign the editor to the second column
		TableColumnModel tcm = ruletypeTable.getColumnModel();
		tcm.getColumn(1).setCellEditor(ruletypeModel.getEditor());

		ruletypeModel.addRow(new Object[]{"Not allowed to use", "high"});
		ruletypeModel.addRow(new Object[]{"Not allowed to use", "high"});
		ruletypeModel.addRow(new Object[]{"Not allowed to use", "high"});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ruletypePanel = new javax.swing.JScrollPane();
        ruletypeTable = new javax.swing.JTable();
        violationtypePanel = new javax.swing.JScrollPane();
        violationtypeTable = new javax.swing.JTable();
        applyViolationTypes = new javax.swing.JButton();

        ruletypeTable.setAutoCreateRowSorter(true);
        ruletypeTable.setModel(ruletypeModel);
        ruletypeTable.setFillsViewportHeight(true);
        ruletypePanel.setViewportView(ruletypeTable);

        violationtypeTable.setAutoCreateRowSorter(true);
        violationtypeTable.setModel(violationtypeModel);
        violationtypeTable.setFillsViewportHeight(true);
        violationtypeTable.getTableHeader().setReorderingAllowed(false);
        violationtypePanel.setViewportView(violationtypeTable);

        applyViolationTypes.setText("Apply");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ruletypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(violationtypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyViolationTypes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(violationtypePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyViolationTypes)
                .addContainerGap())
            .addComponent(ruletypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyViolationTypes;
    private javax.swing.JScrollPane ruletypePanel;
    private javax.swing.JTable ruletypeTable;
    private javax.swing.JScrollPane violationtypePanel;
    private javax.swing.JTable violationtypeTable;
    // End of variables declaration//GEN-END:variables

	private void LoadRuleTypes(List<RuleType> ruletypes) {
		for (RuleType ruletype : ruletypes) {
			ruletypeModel.addRow(new Object[]{ruletype.getKey(), 1, true});
		}
	}

	private void loadViolationType(List<RuleType> ruletypes, String ruletypeKey) {
		System.out.println(ruletypeKey);
//		List<RuleType> ruletypes = ts.getRuletypes();
		for (RuleType ruletype : ruletypes) {
			if (ruletype.getKey().equals(ruletypeKey)) {
				clearModel(violationtypeModel);
				for (ViolationType violationtype : ruletype.getViolationTypes()) {
					violationtypeModel.addRow(new Object[]{violationtype.
								getViolationtypeKey(), 1, true});
				}
			}
		}
	}

	private void clearModel(DefaultTableModel model) {
		int rows = model.getRowCount();
		while (0 < rows) {
			model.removeRow(0);
			rows--;
		}
	}
}
